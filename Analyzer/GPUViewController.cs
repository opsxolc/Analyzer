// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;
using System.Collections.Generic;

namespace Analyzer
{
    //---  Названия метрик для отображения ГПУ  ---//
    enum DVMHStatMetricNames{
        DVMH_STAT_METRIC_KERNEL_EXEC,
        /* DVMH-CUDA memcpy */
        DVMH_STAT_METRIC_CPY_DTOH,
        DVMH_STAT_METRIC_CPY_HTOD,
        DVMH_STAT_METRIC_CPY_DTOD,
        /* DVMH memcpy */
        DVMH_STAT_METRIC_CPY_SHADOW_DTOH,
        DVMH_STAT_METRIC_CPY_SHADOW_HTOD,
        DVMH_STAT_METRIC_CPY_SHADOW_DTOD,
        DVMH_STAT_METRIC_CPY_REMOTE_DTOH,
        DVMH_STAT_METRIC_CPY_REMOTE_HTOD,
        DVMH_STAT_METRIC_CPY_REMOTE_DTOD,
        DVMH_STAT_METRIC_CPY_REDIST_DTOH,
        DVMH_STAT_METRIC_CPY_REDIST_HTOD,
        DVMH_STAT_METRIC_CPY_REDIST_DTOD,
        DVMH_STAT_METRIC_CPY_IN_REG_DTOH,
        DVMH_STAT_METRIC_CPY_IN_REG_HTOD,
        DVMH_STAT_METRIC_CPY_IN_REG_DTOD,
        DVMH_STAT_METRIC_CPY_GET_ACTUAL,
        /* DVMH loop events */
        DVMH_STAT_METRIC_LOOP_PORTION_TIME,
        /* DVMH utility functions events */
        DVMH_STAT_METRIC_UTIL_ARRAY_TRANSFORMATION,
        DVMH_STAT_METRIC_UTIL_ARRAY_REDUCTION,
        DVMH_STAT_METRIC_UTIL_RTC_COMPILATION,
        // --
        DVMH_STAT_METRIC_FORCE_INT
    };


    public partial class GPUViewController : NSViewController
	{
        public const int DVMHStatMetricCount = (int)DVMHStatMetricNames.DVMH_STAT_METRIC_FORCE_INT;

        public static readonly string[] dvmhStatMetricsTitles = {
                "Kernel executions",
                "Copy GPU to CPU",
                "Copy CPU to GPU",
                "Copy GPU to GPU",
                "[Shadow] Copy GPU to CPU",
                "[Shadow] Copy CPU to GPU",
                "[Shadow] Copy GPU to GPU",
                "[Remote] Copy GPU to CPU",
                "[Remote] Copy CPU to GPU",
                "[Remote] Copy GPU to GPU",
                "[Redistribution] Copy GPU to CPU",
                "[Redistribution] Copy CPU to GPU",
                "[Redistribution] Copy GPU to GPU",
                "[Region IN] Copy GPU to CPU",
                "[Region IN] Copy CPU to GPU",
                "[Region IN] Copy GPU to GPU",
                "GET_ACTUAL",
                "Loop execution",
                "Data reorganization",
                "Reduction",
                "GPU Runtime compilation"
        };

        public GPUViewController (IntPtr handle) : base (handle)
		{
		}

        public nfloat Height
        {
            get
            {
                var res = 0;
                for (int i = 0; i < GPUGridView.RowCount; ++i)
                    if (GPUGridView.GetRow(i).Hidden)
                        ++res;
                return View.Frame.Height - res * 20;
            }
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            Console.WriteLine("Loaded");
            //for (int i = 14; i > 5; --i)
            //    GPUGridView.GetRow(i).Hidden = true;
            View.NeedsUpdateConstraints = true;
        }

        private NSTextField MakeLabel(string s)
        {
            var label = new NSTextField
            {
                Bordered = false,
                Editable = false,
                StringValue = s
            };
            label.SetFrameSize(label.FittingSize);
            return label;
        }

        public void Init(GPUTimesJson gpu)
        {
            //Console.WriteLine("Init " + t);
            GPUBox.Title = gpu.gpu_name;
            //var c = GPUGridView.GetCell(1, 1);
            //Console.WriteLine(c.ContentView);
            //c.ContentView = MakeLabel("0.0508c");
            //Console.WriteLine(GPUGridView.GetCell(1, 1).ContentView);
            //c = GPUGridView.GetCell(1, 0);
            //(c.ContentView as NSTextField).StringValue = "Cell!!";
        }
    }
}
