// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;
using System.Collections.Generic;

namespace Analyzer
{
    //---  Названия метрик для отображения ГПУ  ---//
    enum DVMHStatMetrics{
        DVMH_STAT_METRIC_KERNEL_EXEC,
        /* DVMH-CUDA memcpy */
        DVMH_STAT_METRIC_CPY_DTOH,
        DVMH_STAT_METRIC_CPY_HTOD,
        DVMH_STAT_METRIC_CPY_DTOD,
        /* DVMH memcpy */
        DVMH_STAT_METRIC_CPY_SHADOW_DTOH,
        DVMH_STAT_METRIC_CPY_SHADOW_HTOD,
        DVMH_STAT_METRIC_CPY_SHADOW_DTOD,
        DVMH_STAT_METRIC_CPY_REMOTE_DTOH,
        DVMH_STAT_METRIC_CPY_REMOTE_HTOD,
        DVMH_STAT_METRIC_CPY_REMOTE_DTOD,
        DVMH_STAT_METRIC_CPY_REDIST_DTOH,
        DVMH_STAT_METRIC_CPY_REDIST_HTOD,
        DVMH_STAT_METRIC_CPY_REDIST_DTOD,
        DVMH_STAT_METRIC_CPY_IN_REG_DTOH,
        DVMH_STAT_METRIC_CPY_IN_REG_HTOD,
        DVMH_STAT_METRIC_CPY_IN_REG_DTOD,
        DVMH_STAT_METRIC_CPY_GET_ACTUAL,
        /* DVMH loop events */
        DVMH_STAT_METRIC_LOOP_PORTION_TIME,
        /* DVMH utility functions events */
        DVMH_STAT_METRIC_UTIL_ARRAY_TRANSFORMATION,
        DVMH_STAT_METRIC_UTIL_ARRAY_REDUCTION,
        DVMH_STAT_METRIC_UTIL_RTC_COMPILATION,
        // --
        DVMH_STAT_METRIC_FORCE_INT
    };


    public partial class GPUViewController : NSViewController
	{
        public const int DVMHStatMetricCount = (int)DVMHStatMetrics.DVMH_STAT_METRIC_FORCE_INT;

        public static readonly string[] dvmhStatMetricsTitles = {
                "Kernel executions",
                "Copy GPU to CPU",
                "Copy CPU to GPU",
                "Copy GPU to GPU",
                "[Shadow] Copy GPU to CPU",
                "[Shadow] Copy CPU to GPU",
                "[Shadow] Copy GPU to GPU",
                "[Remote] Copy GPU to CPU",
                "[Remote] Copy CPU to GPU",
                "[Remote] Copy GPU to GPU",
                "[Redistribution] Copy GPU to CPU",
                "[Redistribution] Copy CPU to GPU",
                "[Redistribution] Copy GPU to GPU",
                "[Region IN] Copy GPU to CPU",
                "[Region IN] Copy CPU to GPU",
                "[Region IN] Copy GPU to GPU",
                "GET_ACTUAL",
                "Loop execution",
                "Data reorganization",
                "Reduction",
                "GPU Runtime compilation"
        };

        public GPUViewController (IntPtr handle) : base (handle)
		{
		}

        public nfloat Height
        {
            get
            {
                return View.Frame.Height + (GPUGridView.RowCount - 1) * 18;
            }
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            GPUGridView.RowSpacing = 2;
        }

        private NSTextField MakeLabel(string s, bool bold = false)
        {
            var label = new NSTextField
            {
                Bordered = false,
                Editable = false,
                DrawsBackground = false,
                Font = NSFont.FromFontName("Helvetica Neue" + (bold ? " Bold" : ""), 11),
                StringValue = s
            };
            label.SetFrameSize(label.FittingSize);
            return label;
        }

        private string PrepareValue(double value, bool isPositive, bool isSize, bool dashOnZero, bool isTime)
        {
            if (isPositive && value < 0)
                return "⏤";
            if (value == 0 && dashOnZero)
                return "⏤";
            if (isSize)
            {
                if (value - 0.001 < 0) return "⏤";
                if (value >= ((long)1 << 30))
                    return (value / ((long)1 << 30)).ToString("F3") +"G";
                if (value >= ((long)1 << 20))
                    return (value / ((long)1 << 20)).ToString("F3") +"M";
                if (value >= ((long)1 << 10))
                    return (value / ((long)1 << 10)).ToString("F3") +"K";
                if (value >= 0)
                    return value.ToString("F3") + "B";
                return "?";
            }
            if (isTime)
                return value.ToString("F3") + "s";
            return value.ToString("F3");
        }

        public void Init(GPUTimesJson gpu, int gpuNum)
        {
            GPUBox.Title = "GPU #" + gpuNum + "(" + gpu.gpu_name + ")";
            for (int i = 0; i < DVMHStatMetricCount; ++i)
            {
                var metric = gpu.metrics[i];
                if (metric.countMeasures <= 0)
                    continue;
                bool isSize = i >= (int)DVMHStatMetrics.DVMH_STAT_METRIC_CPY_DTOH &&
                    i <= (int)DVMHStatMetrics.DVMH_STAT_METRIC_CPY_GET_ACTUAL ||
                    i == (int)DVMHStatMetrics.DVMH_STAT_METRIC_UTIL_ARRAY_TRANSFORMATION;
                bool isPositive = isSize;
                GPUGridView.AddRow(new NSView[]
                {
                    MakeLabel(dvmhStatMetricsTitles[i]),
                    MakeLabel(metric.countMeasures.ToString()),
                    MakeLabel(PrepareValue(metric.min, isPositive, isSize, false, false)),
                    MakeLabel(PrepareValue(metric.max, isPositive, isSize, false, false)),
                    MakeLabel(PrepareValue(metric.sum, isPositive, isSize, false, false)),
                    MakeLabel(PrepareValue(metric.mean, isPositive, isSize, false, false)),
                    MakeLabel(PrepareValue(metric.timeProductive, true, false, true, true)),
                    MakeLabel(PrepareValue(metric.timeLost, true, false, true, true))
                });
            }
            GPUGridView.AddRow(new NSView[] { MakeLabel(" ") });
            GPUGridView.AddRow(new NSView[]
            {
                MakeLabel("Productive time      " + PrepareValue(gpu.prod_time, true, false, true, true))
            });
            GPUGridView.AddRow(new NSView[]
            {
                MakeLabel("Lost time                " + PrepareValue(gpu.lost_time, true, false, true, true))
            });
            GPUGridView.NeedsUpdateConstraints = true;
        }
    }
}
