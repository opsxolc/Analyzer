// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using AppKit;
using CoreGraphics;

namespace Analyzer
{
	public partial class InsufPopoverController : NSViewController, PlotPopoverInterface
	{
		public InsufPopoverController (IntPtr handle) : base (handle)
		{
		}

		public CGSize Init(int statNum, int interNum, NSWindow window = null)
        {

			var inter = ViewController.CompareList.At(statNum).Interval.GetIntervalAt(interNum);
			NSAttributedString deep = new NSAttributedString("\n\nРассмотрите более глубокие интервалы для уточнения оценки\n" +
                                    "недостаточного параллелизма.",
				NSFont.FromFontName("Helvetica Neue Italic", 10), NSColor.LightGray);
			var str = new NSMutableAttributedString();

			if (inter.Info.id.t == (int)InterTypes.PAR)
			{
				NSAttributedString regString1 = new NSAttributedString("Интервал соответствует ",
                    NSFont.FromFontName("Helvetica Neue", 11));
				NSAttributedString boldString = new NSAttributedString("параллельному",
					NSFont.FromFontName("Helvetica Neue Bold", 11));
				NSAttributedString regString2 = new NSAttributedString(" циклу.\n\n" +
									"Вероятнее всего, потери происходят из-за неверного задания\n" +
									"матрицы процессоров при запуске программы или неверного\n" +
									"распределения данных и вычислений.",
					NSFont.FromFontName("Helvetica Neue", 11));
				str.Append(regString1, boldString, regString2);
			}
			if (inter.Info.id.t == (int)InterTypes.SEQ)
			{
				NSAttributedString regString1 = new NSAttributedString("Интервал соответствует ",
                    NSFont.FromFontName("Helvetica Neue", 11));
				NSAttributedString boldString = new NSAttributedString("последовательному",
                    NSFont.FromFontName("Helvetica Neue Bold", 11));
				NSAttributedString regString2 = new NSAttributedString(" участку.\n\n" +
                    "Скорее всего, причиной потерь является наличие\n" +
                    "последовательного цикла, выполняющего большой\n" +
                    "объем вычислений.",
                    NSFont.FromFontName("Helvetica Neue", 11));
				
				str.Append(regString1, boldString, regString2);
			}
            if (inter.Info.id.t == (int)InterTypes.USER)
            {
				NSAttributedString regString = new NSAttributedString("Подсказка по недостаточному параллелизму доступна\n" +
                                    "только для автоматически размеченных интервалов при\n" +
                                    "компиляции программы с флагами -e1, -e3 или -e4.",
                    NSFont.FromFontName("Helvetica Neue", 11));
				str.Append(regString);
			}

			if (inter.HasChildLoopInterval)
				str.Append(deep);
			Label.AttributedStringValue = str;

			return new CGSize(Label.FittingSize.Width + 13, Label.FittingSize.Height + 13);
		}
	}
}
